<div class="landing">
<!--    <img src="./images/landing.jpg" alt="A landing page image">-->
<!--    <video autoplay controls style="width: 100%; height: 100%">-->
<!--        <source src="./images/animatic.mp4">-->
<!--    </video>-->
</div>

<div class="title-group">
    <h1 class="strong-text title-text">The Right Prop For You</h1>
    <form action="/prop/search" method="GET">
        <input type="text" name="q" placeholder="Search for a prop...">
        <button type="submit" value="" class="search-submit-button"><svg xmlns="http://www.w3.org/2000/svg" width="16"
                height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                <path
                    d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
            </svg></button>
    </form>

</div>

<div>
    <div class="store-inner">
        {{#each props}}
        <div class="store-card container">
            <a href="/prop/{{this.propId}}">
                <img src="/3dmodels/{{this.image}}" alt="The prop's image" class="store-item-image"
                    onerror="this.onerror=null; this.src='/3dmodels/default.jpg'">
            </a>
            <div class="store-item-info">
                <a href="/prop/{{this.propId}}">
                    <h3 class="head-text">{{ this.name }}</h3>
                </a>
                <p>{{ this.description }}</p>
                {{#if this.isAvailable }}
                <p>Quantity: {{this.numOfAvailable}}</p>
                {{else}}
                <p>Out of stock</p>
                {{/if}}
                <p>CA$ {{this.price}} / day</p>
                <button class="button" onclick="addToCart(event, '{{this.propId}}')">Add To Cart</button>
            </div>

        </div>
        {{/each}}
    </div>
</div>


<div class="load-more-container">
    <button id="loadMoreButton" class="button">Load More</button>
</div>


<script>
    document.getElementById("loadMoreButton").addEventListener("click", function () {
        // Track the number of items already displayed
        let displayedPropsCount = document.querySelectorAll('.store-card').length;

        fetch(`/prop/loadmore?skip=${displayedPropsCount}&limit=10`) // fetch props from server
            .then(response => response.json())
            .then(data => {   // Iterate over and display the props
                let propsContainer = document.querySelector('.store-inner');
                let loadMoreButton = document.getElementById("loadMoreButton");

                data.props.forEach(prop => {
                    let propDiv = document.createElement('div');
                    propDiv.classList.add('store-card', 'container');

                    propDiv.innerHTML = `
    <a href="/prop/${prop.propId}">
        <img src="/3dmodels/${prop.image}" alt="The prop's image" class="store-item-image"
        onerror="this.onerror=null; this.src='/3dmodels/default.jpg'">
    </a>
    <div class="store-item-info">
        <a href="/prop/${prop.propId}"><h3 class="head-text">${prop.name}</h3></a>
        <p>${prop.description}</p>
        <p>Quantity: ${prop.quantity}</p>
        <p>CA$ ${prop.price} / day</p>
        <button class="button" onclick="addToCart(event, '${prop.propId}')">Add To Cart</button>
    </div>
    `;

                    propsContainer.appendChild(propDiv);
                });
                // hide the Load More button if no more items are available
            if (!data.moreAvailable) {
                loadMoreButton.style.display = 'none';
            }

            })

            .catch(error => {
                console.error("There was an error fetching more props:", error);
            });
    });


    // getting the cart from local storage it is in JSON form
    const cartJson = localStorage.getItem("cart");
    // parse teh json back to a list
    const cart = cartJson ? JSON.parse(cartJson) : [];

    // This function checks if the current user is authenticated
    function checkAuthentication(callback) {
        fetch("/api/authenticated", { method: "GET" })
            .then((response) => response.json())
            .then((data) => {
                const isAuthenticated = data.authenticated;
                callback(isAuthenticated); // returns true to the callback function if the user is authenticated. False otherwise.
            })
            .catch((error) => {
                console.error("Error checking authentication: ", error);
                callback(false); // Assume the user is not authenticated if there is an error
            });
    }

    function showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    // add to cart

    function addToCart(event, propId) {
        event.preventDefault();
        event.stopPropagation();

        checkAuthentication((isAuthenticated) => {
            if (isAuthenticated) {
                fetch(`/cart/add/${propId}`, { method: "POST" })
                    .then((response) => {
                        if (!response.ok) {
                            throw new Error("Server-side error");
                        }
                        updateCartCount();
                        console.log("Added to User cart successfully");
                    })
                    .catch((error) => {
                        console.error("Error adding to cart: ", error);
                    });
            }
            cart.push(propId);
            let updatedCart = JSON.stringify(cart);
            localStorage.setItem("cart", updatedCart);
            showNotification("Prop added to cart successfully", 'success');
            updateCartCount();
            console.log("Added to local storage cart successfully");
        });
    }

</script>