<div class="main-container">

    <div class="cart-container">
        <h1>My Cart</h1>
        <ul class="cart-items-list">
        </ul>
        <p class="p-flex">Clear Cart <button class="button" onclick="clearCart()">Clear</button></p>
    </div>

    <div class="checkout-container">
        <label for="checkOutDate">Check-Out Date:</label>
        <input type="date" id="checkInDate" name="checkInDate">

        <label for="checkInDate">Check-In Date:</label>
        <input type="date" id="checkOutDate" name="checkOutDate">

        <p id="dayCount">Booking for: <span>0</span> days</p>
        <p id="totalPropAmount">Total prop amount: <span>$0.00</span> for <span id="dayCountDisplay">0</span> days</p>
        <p id="costPerDay">Total cost: <span>$0.00</span> per day</p>
        <p id="deposit">Deposit amount: <span>$0.00</span></p>

        <form action="/orders/new-order/{{userId}}" method="post">
            <input type="submit" class="checkout-button" value="Reserve Props">
        </form>
    </div>
</div>

<script>

    document.addEventListener('DOMContentLoaded', function () {

        const checkInDateInput = document.getElementById('checkInDate');
        const checkOutDateInput = document.getElementById('checkOutDate');
        const dayCountSpan = document.getElementById('dayCount').querySelector('span');

        function updateDayCount() {
            const checkInDate = new Date(checkInDateInput.value);
            const checkOutDate = new Date(checkOutDateInput.value);
            const timeDifference = checkOutDate - checkInDate;
            const dayDifference = timeDifference / (1000 * 3600 * 24); // milliseconds to days

            dayCountSpan.textContent = dayDifference > 0 ? dayDifference : 0;
        }

        checkInDateInput.addEventListener('change', function () {
            checkOutDateInput.min = this.value;
            updateDayCount();
        });

        checkOutDateInput.addEventListener('change', function () {
            updateDayCount();
        });


        // Populating cart page implementation
        const authenticated = {{{ authenticated }}};
    let serverCartItems = authenticated ? JSON.parse({{{ json cartItems }}}) : [];

    // clear local storage and use propulate prop from database if user is authticated
    if (authenticated) {
        localStorage.removeItem('cart');
    }

    // populate from local storage only if not authenticated
    const cartJson = !authenticated ? localStorage.getItem("cart") || '[]' : '[]';
    const localCart = JSON.parse(cartJson);

    const cartList = document.querySelector('.cart-items-list');

    function renderCartItem(data, cartList) {
        let listItem = document.createElement('li');
        listItem.classList.add('cart-item');
        listItem.innerHTML = `
                <span class="prop-name">Name: ${data.item.name}</span>
                <span class="prop-description">Description: ${data.item.description}</span>
                <span class="prop-quantity">Quantity: ${data.quantity}</span>
                <span class="prop-cost">Cost: $${data.item.price}</span> 

            `;
        cartList.appendChild(listItem);
    }

    if (authenticated) {
        serverCartItems.forEach(item => renderCartItem(item, cartList));
    }

    if (!authenticated) {
        const cartJson = localStorage.getItem('cart') || '[]';
        const localCart = JSON.parse(cartJson);

        localCart.forEach(propId => {
            fetch(`/api/getProp/${propId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Server-side error');
                    }
                    return response.json();
                })
                .then(data => {
                    renderCartItem({
                        item: data,
                        quantity: 1
                    }, cartList);
                })
                .catch(error => {
                    console.error('There was an error fetching the item details:', error);
                });
        });
    }

    });

</script>


