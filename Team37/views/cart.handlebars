<div class="main-container">

    <div class="cart-container">
        <h1>My Cart</h1>
        <ul class="cart-items-list">
        </ul>
        <p class="p-flex">Clear Cart <button class="button" onclick="clearCart()">Clear</button></p>
    </div>

    <div class="checkout-container">
        <label for="checkOutDate">Check-Out Date:</label>
        <input type="date" id="checkInDate" name="checkInDate">

        <label for="checkInDate">Check-In Date:</label>
        <input type="date" id="checkOutDate" name="checkOutDate">

        <p id="dayCount">Booking for: <span>0</span> days</p>
        <p id="costPerDay">Total Amount: <span>$0.00</span></p>
        <p id="totalPropAmount">Reserve Amount: <span>$0.00</span></p>
        <p id="deposit">Deposit amount: <span>$0.00</span> for <span id="dayCount">0</span> days</p>  

        <form id="payment-form" action="routes/orders/new-order/{{userId}}" method="post">
            <div id="card-element"></div>
            <div id="card-errors" role="alert"></div>
            <input type="submit" class="checkout-button" value="Reserve Props">
        </form>
    </div>
</div>


<script>

    document.addEventListener('DOMContentLoaded', function () {     

        const checkInDateInput = document.getElementById('checkInDate');
        const checkOutDateInput = document.getElementById('checkOutDate');
        const dayCountSpan = document.getElementById('dayCount').querySelector('span');

        function updateDayCount() {
            const checkInDate = new Date(checkInDateInput.value);
            const checkOutDate = new Date(checkOutDateInput.value);
            const timeDifference = checkOutDate - checkInDate;
            const dayDifference = timeDifference / (1000 * 3600 * 24); // milliseconds to days

            dayCountSpan.textContent = dayDifference > 0 ? dayDifference : 0;

            // update the deposit amount
            const totalAmount = parseFloat(document.getElementById('costPerDay').querySelector('span').textContent.replace('$', ''));
            const depositPercentage = {{depositPercentage}}; // Fetch from the server
            const reserveAmount = totalAmount * (depositPercentage * 0.01);
            updateDepositAmount(reserveAmount);
        }

        checkOutDateInput.addEventListener('change', function () {
            updateDayCount();
        });

        checkInDateInput.addEventListener('change', function () {
            checkOutDateInput.min = this.value;
            updateDayCount();
        });


        function renderCartItem(data, cartList, authenticated) {

            let itemId = data.item._id;

            let listItem = document.createElement('li');
            listItem.classList.add('cart-item');

            listItem.innerHTML = `
                    <span class="prop-name">Name: ${data.item.name}</span>
                    <span class="prop-description">Description: ${data.item.description}</span>
                    <span class="prop-quantity">Quantity: ${data.quantity}</span>
                    <span class="prop-cost">Cost: $${data.item.price}</span> 
                    <button class="remove-btn" data-id="${itemId}">Remove</button>
                `;

            cartList.appendChild(listItem);
            listItem.querySelector('.remove-btn').addEventListener('click', () => {
                removeCartItem(itemId, authenticated);
        });
            updateTotalAmount();
        }

    // Populating cart page implementation
    const authenticated = {{{ authenticated }}};
    let serverCartItems = authenticated ? JSON.parse({{{ json cartItems }}}) : [];

    // clear local storage and use propulate prop from database if user is authticated
    if (authenticated) {
        localStorage.removeItem('cart');
    }

    // populate from local storage only if not authenticated
    const cartJson = !authenticated ? localStorage.getItem("cart") || '[]' : '[]';
    const localCart = JSON.parse(cartJson);

    const cartList = document.querySelector('.cart-items-list');

    if (authenticated) {
        serverCartItems.forEach(item => renderCartItem(item, cartList));
        updateTotalAmount();

    }

    if (!authenticated) {
        const cartJson = localStorage.getItem('cart') || '[]';
        let localCart = JSON.parse(cartJson);

        localCart.forEach(propId => {
            fetch(`/api/getProp/${propId}`)
                .then(response => response.json())
                .then(data => {
                    renderCartItem({ item: data, quantity: 1 }, cartList); // Quantity is assumed to be 1
                })
                .catch(error => {
                    console.error('There was an error:', error);
                });
        });
    }

    function removeCartItem(itemId, authenticated) {
        if (authenticated) {
                fetch('/cart/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ itemId: itemId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message === "Item removed from cart") {
                        const itemElement = document.querySelector(`[data-id="${itemId}"]`).parentElement;
                        itemElement.remove();
                        updateTotalAmount();
                        updateCartCount();
                        location.reload();
                    } else {
                        console.error('Item was not removed:', data.message);
                    }
                })
                .catch(error => {
                    console.error('There was an error:', error);
                });
        } else {
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            cart = cart.filter(id => id !== itemId); 
            localStorage.setItem('cart', JSON.stringify(cart));
            document.querySelector(`[data-id="${itemId}"]`).parentElement.remove();
            updateTotalAmount();
            updateCartCount();
            location.reload();
        }
    }

    
    async function updateTotalAmount() {
        const cartItems = authenticated ? serverCartItems : localCart;

        let totalAmount = 0;

        if (!authenticated) {
            // For unauthenticated users, cartItems are just IDs.
            const promises = cartItems.map(propId => fetch(`/api/getProp/${propId}`).then(resp => resp.json()));
            const props = await Promise.all(promises);

            props.forEach(prop => {
                totalAmount += prop.price; 
            });
        } else {
            // For authenticated users, cartItems are full objects
            cartItems.forEach(item => {
                totalAmount += item.item.price * item.quantity;
            });
        }

        document.getElementById('costPerDay').querySelector('span').textContent = `$${totalAmount.toFixed(2)}`;
        updateReserveAmount(totalAmount);
    }

    // Function to calculate and update reserve amount
    function updateReserveAmount(totalAmount) {
        const depositPercentage = {{depositPercentage}}; // Fetch from the server
        const reserveAmount = totalAmount * (depositPercentage * 0.01);
        document.getElementById('totalPropAmount').querySelector('span').textContent = `$${reserveAmount.toFixed(2)} per day`;
        updateDepositAmount(reserveAmount);
    }

    // Function to calculate and update deposit amount
    function updateDepositAmount(reserveAmount) {
        const daysCountForDeposit = parseInt(document.getElementById('dayCount').querySelector('span').textContent, 10);
        const depositAmount = reserveAmount * daysCountForDeposit;

        document.getElementById('deposit').querySelectorAll('span')[0].textContent = `$${depositAmount.toFixed(2)}`;
        document.getElementById('deposit').querySelectorAll('span')[1].textContent = daysCountForDeposit;
    }

    });


</script>


<script src="https://js.stripe.com/v3/"></script>

<script>
    // Initialize Stripe.js with publishable key
            const stripe = Stripe('pk_test_51OAKPjCUWYKakee9uqX1PvVQxvgjxne676F0d7c6ujYg3uxu2r5qCUz8y1jlSRDkz73xPtgD7Etpyf0M1RCualDF00L2JYGtbh');
            const elements = stripe.elements();
            const cardElement = elements.create('card');
            cardElement.mount('#card-element');

            // To handle validation errors from the card element
            cardElement.addEventListener('change', function(event) {
                const displayError = document.getElementById('card-errors');
                if (event.error) {
                    displayError.textContent = event.error.message;
                } else {
                    displayError.textContent = '';
                }
            });

            // To handle form submission
            document.querySelector('#payment-form').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const { paymentMethod, error } = await stripe.createPaymentMethod({
                    type: 'card',
                    card: cardElement,
                });

                if (error) {
                    // display any error from creating the payment method
                    document.getElementById('card-errors').textContent = error.message;
                    return; 
                }
                const depositAmountSpan = document.getElementById('deposit').querySelectorAll('span')[0];
                    let depositAmountText = depositAmountSpan.textContent;
                    let depositAmount = parseFloat(depositAmountText.replace(/[$,]/g, '')) * 100; // converting dollars to cents

                    // make sure we have a proper number for the deposit amount
                    if (isNaN(depositAmount) || depositAmount <= 0) {
                        console.error('Invalid deposit amount');
                        return;
                    }

                    // call to server to process the payment and create the order
                    fetch('/orders/new-order/{{userId}}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ paymentMethodId: paymentMethod.id, depositAmount }),

                    })
                    .then(response => response.json())
                    .then(result => {
                        // process result
                        if (result.error) {
                            console.error(result.error.message);
                            // display errors on the page
                            document.getElementById('card-errors').textContent = result.error.message;
                        } else {
                            // display message and re-drirect when order gets successful
                            alert('Payment successful! Your order has been placed.'); 
                            window.location.href = `/orders/${result.orderId}`;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        document.getElementById('card-errors').textContent = error.message;
                    });
                }
            );
</script>